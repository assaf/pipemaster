0.5.0 (2010-03-01)
This release adds background processes.  The Pipefile can specify multiple
background activities.  Pipemaster starts each activity by forking a new child
process (with the same environment as all other workers).

When Pipemaster terminates, it terminates all child processes (QUIT or TERM,
depending on signal).  In addition, when reloading the configuration (HUP),
Pipemaster asks all background processes to terminate gracefully and restarts
new background processes based on the new configuration.

To define a background process:

background :resque do
  resque = Resque::Worker.new(:tasks)
	resque.work(5) # interval, will block
end

* Added: Background processes.
* Changed: Configuration method app becomes setup.  Same semantics, just better name.

0.4.2 (2010-02-19)
* Fix: Pipe command exits with retcode on successful completion.

0.4.1 (2010-02-19)
* Added: Service control file in etc/pipemaster (puts this in your /etc/init.d directory)
* Added: pipe command gets --retcode/-c option to return exit code in case of failure.
* Added: Pipefile uses app { } for application loading block.
* Changed: Return status for errors is 127.
* Fixed: pipemaster command always defaulting to run as daemon.
* Fixed: Added time delay when retrying after master loop exception (typically, failure to bind on port).
* Fixed: Can't stop server.

0.4.0 (2010-02-19)
* Added: pipe command (client).
* Added: Pipemaster::Client gets pipe and capture methods, global address setting.
* Added: Command line client gets --tty option, when used, captures stdin when running in terminal.
* Added: Configurator command method now takes proc/method as second argument.
* Changed: Unicorn is no longer a dependency, code merged instead.
* Fixed: USR2 signal now properly restarts server.
