#!/usr/bin/env ruby
# -*- encoding: binary -*-
require "pipemaster/client"
require "optparse"

ENV["PIPE_ENV"] ||= "development"
address = nil
retcode = nil
tty = false

opts = OptionParser.new("", 24, '  ') do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] command [args]\n"

  opts.on("-t", "--tty", "read input from terminal (default: false)") do |t|
    tty = t ? true : false
  end

  opts.on("-s", "--socket {HOST:PORT|PATH}",
          "communicate on HOST:PORT or PATH",
          "(default: #{Pipemaster::DEFAULT_LISTEN})") do |a|
    address = a
  end

  opts.on("-c", "--retcode CODE", "return code in case of failure (default: raise exception)") do |r|
    retcode = r
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts.to_s.gsub(/^.*DEPRECATED.*$/s, '')
    exit
  end

  opts.on("-v", "--version", "Show version") do
    puts "Pipemaster v#{Pipemaster::VERSION}"
    exit
  end

  opts.parse! ARGV
end

begin
  input = $stdin if tty || !$stdin.isatty 
  retcode = Pipemaster::Client.new(address).capture(input, $stdout).run(*ARGV)
rescue Exception=>ex
  raise unless retcode
end
exit retcode.to_i
